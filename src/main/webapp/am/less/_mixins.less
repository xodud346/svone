
/*22 mixins ====================================================== */

// utilities
// -------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of "table" rather than "block" is only necessary if using
//    ":before" to contain the top-margins of child elements.


// WebKit-style focus
.tab-focus() {
    outline: thin dotted;
    outline: 5px auto -webkit-focus-ring-color; // webkit
    outline-offset: -2px;
}

// Sizing shortcuts
.size(@width; @height) {
    width: @width;
    height: @height;
}
.square(@size) {
    .size(@size; @size);
}

// Placeholder text
.placeholder(@color: @input-color-placeholder) {
    &:-moz-placeholder            { color: @color; } // Firefox 4-18
    &::-moz-placeholder           { color: @color;   // Firefox 19+
                                  opacity: 1; } // See https://github.com/twbs/bootstrap/pull/11526
    &:-ms-input-placeholder       { color: @color; } // Internet Explorer 10+
    &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
    &.placeholder { color: @color; }
}

// CSS image replacement
//
// Heads up! v3 launched with with only ".hide-text()", but per our pattern for
// mixins being reused as classes with the same name, this doesn't hold up. As
// of v3.0.1 we have added ".text-hide()" and deprecated ".hide-text()". Note
// that we cannot chain the mixins together in Less, so they are repeated.
//
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757

// Deprecated as of v3.0.1 (will be removed in v4)
.hide-text() {
    font: ~"0/0" a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: none;
}
// New mixin to use as of v3.0.1
.text-hide() {
    .hide-text();
}

// CSS3 PROPERTIES
// --------------------------------------------------

// Single side border-radius
.border-top-radius(@radius) {
    border-top-right-radius: @radius;
    border-top-left-radius: @radius;
}
.border-right-radius(@radius) {
    border-bottom-right-radius: @radius;
    border-top-right-radius: @radius;
}
.border-bottom-radius(@radius) {
    border-bottom-right-radius: @radius;
    border-bottom-left-radius: @radius;
}
.border-left-radius(@radius) {
    border-bottom-left-radius: @radius;
    border-top-left-radius: @radius;
}

// Drop shadows
.box-shadow(@shadow) {
  -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1
          box-shadow: @shadow;
}
.box-shadow-rgba(@px, @r, @g, @b, @a){
  -webkit-box-shadow: @px @px @px rgba(@r, @g, @b, @a);
          box-shadow: @px @px @px lighten(rgb(@r, @g, @b), @a);
          box-shadow: @px @px @px rgba(@r, @g, @b, @a);
}

// Transitions
.transition(@transition) {
  -webkit-transition: @transition;
          transition: @transition;
}
.transition-property(@transition-property) {
  -webkit-transition-property: @transition-property;
          transition-property: @transition-property;
}
.transition-delay(@transition-delay) {
  -webkit-transition-delay: @transition-delay;
          transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
  -webkit-transition-duration: @transition-duration;
          transition-duration: @transition-duration;
}
.transition-timing-function(@trainsition-timing){
    -webkit-transition-timing-function: @trainsition-timing;
    -moz-transition-timing-function:    @trainsition-timing;
    transition-timing-function:         @trainsition-timing;
}
.transition-transform(@transition) {
  -webkit-transition: -webkit-transform @transition;
     -moz-transition: transform @transition;
          transition: transform @transition;
}

// Transformations
.rotate(@degrees) {
  -webkit-transform: rotate(@degrees);
      -ms-transform: rotate(@degrees); // IE9 only
          transform: rotate(@degrees);
}
.scale(@ratio; @ratio-y...) {
  //-webkit-transform: scale(@ratio, @ratio-y);
      -ms-transform: scale(@ratio, @ratio-y); // IE9 only
          transform: scale(@ratio, @ratio-y);
}
.translate(@x; @y) {
  -webkit-transform: translate(@x, @y);
      -ms-transform: translate(@x, @y); // IE9 only
          transform: translate(@x, @y);
}
.translateZ(@z) {
  -webkit-transform: translateZ(@z);
      -ms-transform: translateZ(@z); // IE9 only
          transform: translateZ(@z);
}
.skew(@x; @y) {
  -webkit-transform: skew(@x, @y);
      -ms-transform: skewX(@x) skewY(@y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
          transform: skew(@x, @y);
}
.translate3d(@x; @y; @z) {
  -webkit-transform: translate3d(@x, @y, @z);
          transform: translate3d(@x, @y, @z);
}

.rotateX(@degrees) {
  -webkit-transform: rotateX(@degrees);
      -ms-transform: rotateX(@degrees); // IE9 only
          transform: rotateX(@degrees);
}
.rotateY(@degrees) {
  -webkit-transform: rotateY(@degrees);
      -ms-transform: rotateY(@degrees); // IE9 only
          transform: rotateY(@degrees);
}
.perspective(@perspective) {
  -webkit-perspective: @perspective;
     -moz-perspective: @perspective;
          perspective: @perspective;
}
.perspective-origin(@perspective) {
  -webkit-perspective-origin: @perspective;
     -moz-perspective-origin: @perspective;
          perspective-origin: @perspective;
}
.transform-origin(@origin) {
  -webkit-transform-origin: @origin;
     -moz-transform-origin: @origin;
      -ms-transform-origin: @origin; // IE9 only
          transform-origin: @origin;
}
.transform-style(@style) {
  -webkit-transform-style: @style;
     -moz-transform-style: @style;
      -ms-transform-style: @style; // IE9 only
          transform-style: @style;
}

// Animations
.animation(@animation) {
  -webkit-animation: @animation;
          animation: @animation;
}
.animation-name(@name) {
  -webkit-animation-name: @name;
          animation-name: @name;
}
.animation-duration(@duration) {
  -webkit-animation-duration: @duration;
          animation-duration: @duration;
}
.animation-timing-function(@timing-function) {
  -webkit-animation-timing-function: @timing-function;
          animation-timing-function: @timing-function;
}
.animation-delay(@delay) {
  -webkit-animation-delay: @delay;
          animation-delay: @delay;
}
.animation-iteration-count(@iteration-count) {
  -webkit-animation-iteration-count: @iteration-count;
          animation-iteration-count: @iteration-count;
}
.animation-direction(@direction) {
  -webkit-animation-direction: @direction;
          animation-direction: @direction;
}
.animation-fill-mode(@fill-mode) {
  -webkit-animation-fill-mode: @fill-mode;
          animation-fill-mode: @fill-mode;
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is "visible", but can be changed to "hidden"

// Box sizing
.box-sizing(@boxmodel: border-box) when (@boxmodel = content-box){
    -webkit-box-sizing: @boxmodel;
    -moz-box-sizing: @boxmodel;
    box-sizing: @boxmodel;
}
.box-sizing(@boxmodel: border-box) when (@boxmodel = border-box){
    -webkit-box-sizing: @boxmodel;
    -moz-box-sizing: @boxmodel;
    box-sizing: @boxmodel;
}

// User select
// For selecting text on the page
.user-select(@select: none) {
  -webkit-user-select: @select;
     -moz-user-select: @select;
      -ms-user-select: @select; // IE10+
          user-select: @select;
}

// Resize anything
.resizable(@direction) {
  resize: @direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}

// CSS3 Content Columns
.content-columns(@column-count; @column-gap: @grid-gutter-width) {
  -webkit-column-count: @column-count;
     -moz-column-count: @column-count;
          column-count: @column-count;
  -webkit-column-gap: @column-gap;
     -moz-column-gap: @column-gap;
          column-gap: @column-gap;
}

// Optional hyphenation
.hyphens(@mode: auto) {
  word-wrap: break-word;
  -webkit-hyphens: @mode;
     -moz-hyphens: @mode;
      -ms-hyphens: @mode; // IE10+
          hyphens: @mode;
}

// Opacity
.opacity(@opacity) {
  opacity: @opacity;
  // IE8 filter
  @opacity-ie: (@opacity * 100);
  filter: ~"alpha(opacity=@{opacity-ie})";
}



// GRADIENTS
// --------------------------------------------------

#gradient {

  // Horizontal gradient, from left to right
  //
  // Creates two color stops, start and end, by specifying a color and position for each color stop.
  // Color stops are not available in IE9 and below.
  .horizontal(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
    background-image: -webkit-linear-gradient(left, color-stop(@start-color @start-percent), color-stop(@end-color @end-percent)); // Safari 5.1-6, Chrome 10+
    background-image:  linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    .background-repeat-x();
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down
  }

  // Vertical gradient, from top to bottom
  //
  // Creates two color stops, start and end, by specifying a color and position for each color stop.
  // Color stops are not available in IE9 and below.
  .vertical(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
    background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Safari 5.1-6, Chrome 10+
    background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    .background-repeat-x();
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down
  }

  .directional(@start-color: #555; @end-color: #333; @deg: 45deg) {
    .background-repeat-x();
    background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1-6, Chrome 10+
    background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  }
  .horizontal-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
    background-image: -webkit-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
    background-image: linear-gradient(to right, @start-color, @mid-color @color-stop, @end-color);
    .background-no-repeat();
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
  }
  .vertical-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
    background-image: -webkit-linear-gradient(@start-color, @mid-color @color-stop, @end-color);
    background-image: linear-gradient(@start-color, @mid-color @color-stop, @end-color);
    .background-no-repeat();
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
  }
  .radial(@inner-color: #555; @outer-color: #333) {
    background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);
    background-image: radial-gradient(circle, @inner-color, @outer-color);
    .background-no-repeat();
  }
  .striped(@color: rgba(255,255,255,.15); @angle: 45deg) {
    background-image: -webkit-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
    background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
  }
}

// Reset filters for IE
//
// When you need to remove a gradient background, do not forget to use this to reset
// the IE filter for IE9 and below.
.reset-filter() {
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}



// Retina images
//
// Short retina mixin for setting background-image and -size

.img-retina(@file-1x; @file-2x; @width-1x; @height-1x) {
    background-image: url("@{file-1x}");

    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (   min--moz-device-pixel-ratio: 2),
    only screen and (     -o-min-device-pixel-ratio: 2/1),
    only screen and (        min-device-pixel-ratio: 2),
    only screen and (                min-resolution: 192dpi),
    only screen and (                min-resolution: 2dppx) {
        background-image: url("@{file-2x}");
        background-size: @width-1x @height-1x;
    }
}


// Responsive image
//
// Keep images from scaling beyond the width of their parents.

.img-responsive(@display: block) {
    display: @display;
    max-width: 100%; // Part 1: Set a maximum relative to the parent
    height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}


// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
.nav-divider(@color: #e5e5e5) {
    height: 1px;
    margin: ((@line-height-computed / 2) - 1) 0;
    overflow: hidden;
    background-color: @color;
}

// Panels
// -------------------------
.panel-variant(@border; @heading-text-color; @heading-bg-color; @heading-border) {
  border-color: @border;

  & > .panel-heading {
    color: @heading-text-color;
    background-color: @heading-bg-color;
    border-color: @heading-border;

    + .panel-collapse .panel-body {
      border-top-color: @border;
    }
  }
  & > .panel-footer {
    + .panel-collapse .panel-body {
      border-bottom-color: @border;
    }
  }
}

// Alerts
// -------------------------
.alert-variant(@background; @border; @text-color) {
    background-color: @background;
    border-color: @border;
    color: @text-color;

    hr {
        border-top-color: darken(@border, 5%);
    }
    .alert-link {
        color: darken(@text-color, 10%);
    }
}

// Tables
// -------------------------
.table-row-variant(@state; @background) {
  // Exact selectors below required to override ".table-striped" and prevent
  // inheritance to nested tables.
  .table > thead > tr,
  .table > tbody > tr,
  .table > tfoot > tr {
    > td.@{state},
    > th.@{state},
    &.@{state} > td,
    &.@{state} > th {
      background-color: @background;
    }
  }

  // Hover states for ".table-hover"
  // Note: this is not available for cells or rows within "thead" or "tfoot".
  .table-hover > tbody > tr {
    > td.@{state}:hover,
    > th.@{state}:hover,
    &.@{state}:hover > td,
    &.@{state}:hover > th {
      background-color: darken(@background, 5%);
    }
  }
}

// List Groups
// -------------------------
.list-group-item-variant(@state; @background; @color) {
  .list-group-item-@{state} {
    color: @color;
    background-color: @background;

    a& {
      color: @color;

      .list-group-item-heading { color: inherit; }

      &:hover,
      &:focus {
        color: @color;
        background-color: darken(@background, 5%);
      }
      &.active,
      &.active:hover,
      &.active:focus {
        color: #fff;
        background-color: @color;
        border-color: @color;
      }
    }
  }
}

// Button variants
// -------------------------
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
.button-variant(@color; @background; @border) {
    &, &:link {
        color: @color;
        background-color: @background;
        border-color: @border;
    }

  &:hover,
  &:focus,
  &:active,
  &.active,
  .open .dropdown-toggle& {
    color: @color;
    background-color: darken(@background, 8%);
        border-color: darken(@border, 12%);
  }
  &:active,
  &.active,
  .open .dropdown-toggle& {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: @background;
          border-color: @border;
    }
  }

  .badge {
    color: @background;
    background-color: @color;
  }
}

// Button sizes
// -------------------------
.button-size(@padding-top; @padding-right; @padding-bottom; @padding-left; @font-size; @line-height; @border-radius) {
    padding: @padding-top @padding-right @padding-bottom @padding-left;
    .ie10 &,
    .ie & {
        padding: @padding-top @padding-right @padding-bottom @padding-left;
    }
    .ie7 & {
        padding: @padding-top @padding-right @padding-bottom @padding-left;
    }
    font-size: @font-size;
    line-height: @line-height;
    border-radius: @border-radius;
}

// 버튼 만들기
.set-button(@y: 40px, @bgcolor: #eee, @color: #333, @percent: 2%){
    height: @y;
    line-height: @y;
    background-color: @bgcolor;
    color: @color;
    display: inline;
    display: inline-block;
    vertical-align: middle;
    padding-left: 20px;
    padding-right: 20px;
    text-align: center;
    font-weight: normal;
    font-size: 13px;
    transition: backgroundColor .2s;
    em {
        .sr-only();
    }
    &:hover {
        text-decoration: none;
        background-color: lighten(@bgcolor, @percent);
        color: lighten(@color, @percent);
    }
}

// Pagination
// -------------------------
.pagination-size(@padding-vertical; @padding-horizontal; @font-size; @border-radius) {
  > li {
    > a,
    > span {
      padding: @padding-vertical @padding-horizontal;
      font-size: @font-size;
    }
    &:first-child {
      > a,
      > span {
        .border-left-radius(@border-radius);
      }
    }
    &:last-child {
      > a,
      > span {
        .border-right-radius(@border-radius);
      }
    }
  }
}

// Contextual backgrounds
// -------------------------
.bg-variant(@color) {
    background-color: @color;
    a&:hover {
        background-color: darken(@color, 10%);
    }
}

// Typography
// -------------------------
.text-emphasis-variant(@color) {
    color: @color;
    a&:hover {
        color: darken(@color, 10%);
    }
}

// Navbar vertical align
// -------------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out "navbar-vertical-align(30px)" to calculate the appropriate top margin.
.navbar-vertical-align(@element-height) {
    margin-top: ((@navbar-height - @element-height) / 2);
    margin-bottom: ((@navbar-height - @element-height) / 2);
}

// Progress bars
// -------------------------
.progress-bar-variant(@color) {
    background-color: @color;
    .progress-striped & {
        #gradient > .striped();
    }
}

// Responsive utilities
// -------------------------
// More easily include all the states for responsive-utilities.less.
.responsive-visibility() {
  display: block !important;
  table&  { display: table; }
  tr&     { display: table-row !important; }
  th&,
  td&     { display: table-cell !important; }
}

.responsive-invisibility() {
    &, tr&, th&, td& {
        display: none !important;
    }
}


// Grid System
// -----------

// Centered container element
.container-fixed() {
    margin-right: auto;
    margin-left: auto;
    padding-left: (@grid-gutter-width / 2);
    padding-right: (@grid-gutter-width / 2);
    &:extend(.clearfix all);
}

// Creates a wrapper for a series of columns
.make-row(@gutter:@grid-gutter-width) {
    margin-left: (@gutter / -2);
    margin-right: (@gutter / -2);
    &:extend(.clearfix all);
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @grid-gutter-width) {
    .pos-relative();
    .pull-left();
    width: percentage((@columns / @grid-columns));
    min-height: 1px;
    padding-left:  (@gutter / 2);
    padding-right: (@gutter / 2);
}
.make-xs-column-offset(@columns) {
  @media (min-width: @screen-xs-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-xs-column-push(@columns) {
  @media (min-width: @screen-xs-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-xs-column-pull(@columns) {
  @media (min-width: @screen-xs-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the small columns
.make-sm-column(@columns; @gutter: @grid-gutter-width) {
  .pos-relative();
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-sm-min) {
    .pull-left();
    width: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-offset(@columns) {
  @media (min-width: @screen-sm-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-push(@columns) {
  @media (min-width: @screen-sm-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-pull(@columns) {
  @media (min-width: @screen-sm-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the medium columns
.make-md-column(@columns; @gutter: @grid-gutter-width) {
  .pos-relative();
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-md-min) {
    .pull-left();
    width: percentage((@columns / @grid-columns));
  }
}
.make-md-column-offset(@columns) {
  @media (min-width: @screen-md-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-push(@columns) {
  @media (min-width: @screen-md-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-pull(@columns) {
  @media (min-width: @screen-md-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the large columns
.make-lg-column(@columns; @gutter: @grid-gutter-width) {
  .pos-relative();
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-lg-min) {
    .pull-left();
    width: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-offset(@columns) {
  @media (min-width: @screen-lg-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-push(@columns) {
  @media (min-width: @screen-lg-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-pull(@columns) {
  @media (min-width: @screen-lg-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of "@grid-columns".

.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) when (@index = 1) { // initial
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      .pos-relative();
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
    }
  }
  .col(1); // kickstart it
}

.make-grid-columns-float(@class) {
  .col(@index) when (@index = 1) { // initial
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      .pull-left();
    }
  }
  .col(1); // kickstart it
}

.calc-grid(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}
.calc-grid(@index, @class, @type) when (@type = push) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
.calc-grid(@index, @class, @type) when (@type = pull) {
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}
.calc-grid(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}

// Basic looping in LESS
.make-grid(@index, @class, @type) when (@index >= 0) {
  .calc-grid(@index, @class, @type);
  // next iteration
  .make-grid((@index - 1), @class, @type);
}


// Form validation states
//
// Used in forms.less to generate the form validation CSS for warnings, errors,
// and successes.

.form-control-validation(@text-color: #555; @border-color: #ccc; @background-color: #f5f5f5) {
  // Color the label and help text
  .help-block,
  .control-label,
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline  {
    color: @text-color;
  }
  // Set the border and box shadow on specific inputs to match
  .form-control {
    border-color: @border-color;
    .box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken(@border-color, 10%);
      @shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@border-color, 20%);
      .box-shadow(@shadow);
    }
  }
  // Set validation states also for addons
  .input-group-addon {
    color: @text-color;
    border-color: @border-color;
    background-color: @background-color;
  }
  // Optional feedback icon
  .form-control-feedback {
    color: @text-color;
  }
}

// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the "@input-focus-border" variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.

.form-control-focus(@color: @input-border-focus) {
    @color-rgba: rgba(red(@color), green(@color), blue(@color), .6);
    &:focus {
        border-color: @color;
        outline: 0;
        .box-shadow(~"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @{color-rgba}");
    }
}

// Form control sizing
//
// Relative text size, padding, and border-radii changes for form controls. For
// horizontal sizing, wrap controls in the predefined grid classes. "<select>"
// element gets special love because it's special, and that's a fact!

.input-size(@input-height; @padding-vertical; @padding-horizontal; @font-size; @line-height; @border-radius) {
    height: @input-height;
    padding: @padding-vertical @padding-horizontal;
    font-size: @font-size;
    line-height: @line-height;
    border-radius: @border-radius;
    select& {
        height: @input-height;
        line-height: @input-height;
    }
    textarea& {
        height: auto;
    }
}


// height width line-height / case boolean:
.height(@height, @bool-line-height: false) when (@bool-line-height = true) {
    height: @height;
    line-height: @height;
}
.height(@height, @bool-line-height: false) when (@bool-line-height = false) {
    height: @height;
}

// helper mixins : cross Browsing ===================================================== */
.backface-visibility(@visibility) {
    -webkit-backface-visibility: @visibility;
    backface-visibility: @visibility;
}
.min-height(@size) {
    min-height: @size;
    height: auto !important;
    height: @size;
}
.min-width(@size) {
    min-width: @size;
    width: auto !important;
    width: @size;
}
.max-width(@size) {
    max-width: @size;
    width: auto !important;
    width: @size;
}
.border-radius(@size) {
    border-radius: @size;
}

// helper mixins : typhography ===================================================== */
.font-family(@font-family) {
    font-family: @font-family;
}
.text(@align: center) {
    text-align: @align !important;
}
.reset {
    margin: 0;
    padding: 0;
    list-style: none;
    font-weight: normal;
}

.focus-shadow(@color: @brand-primary){ // 포커싱 후 섀도우 효과
    .transition(~"border-color ease-in-out .2s, box-shadow ease-in-out .2s");
    &:focus {
        border-color: @color;
        .box-shadow(0 0 5px @color);
    }
}

// mixins ========================================================================== */
.width(@size, @full: 640, @important: false) when (@important = true){
    width: percentage(@size / @full) !important;
}
.width(@size, @full: 640, @important: false) when (@important = false){
    width: percentage(@size / @full);
}
.margin-left(@size, @full: 640, @important: false) when (@important = true){
    margin-left: percentage(@size / @full) !important;
}
.margin-left(@size, @full: 640, @important: false) when (@important = false){
    margin-left: percentage(@size / @full);
}
.margin-right(@size, @full: 640, @important: false) when (@important = true){
    margin-right: percentage(@size / @full) !important;
}
.margin-right(@size, @full: 640, @important: false) when (@important = false){
    margin-right: percentage(@size / @full);
}
.padding-left(@size, @full: 640, @important: false) when (@important = true){
    padding-left: percentage(@size / @full) !important;
}
.padding-left(@size, @full: 640, @important: false) when (@important = false){
    padding-left: percentage(@size / @full);
}
.padding-right(@size, @full: 640, @important: false) when (@important = true){
    padding-right: percentage(@size / @full) !important;
}
.padding-right(@size, @full: 640, @important: false) when (@important = false){
    padding-right: percentage(@size / @full);
}


/* mixins ******************************************************/
.opacity-in(@ms: .4s) {
    .csstransitions & {
        opacity: 1;
        visibility: visible;
        transition: opacity @ms 0s, visibility 0s 0s, z-index 0s 0s;
        -webkit-transition: opacity @ms 0s, visibility 0s 0s, z-index 0s 0s;
    }
    .no-csstransitions & {
        display: block;
    }
}
.opacity-out(@ms: .4s) {
    .csstransitions & {
        opacity: 0;
        visibility: hidden;
        transition: opacity @ms 0s, visibility 0s @ms, z-index 0s @ms;
        -webkit-transition: opacity @ms 0s, visibility 0s @ms, z-index 0s @ms;
    }
    .no-csstransitions & {
        display: none;
    }
}

/*22 icon : mixins ====================================================== */

.img(@file, @type: png) {
    background-image: url('@{path-images}/@{file}.@{type}');
}

.icon-size(@x, @y, @retina: true) when (@retina = false){
    width: @x;
    height: @y;
    background-size: @x @y;
}

.icon-size(@x, @y, @retina: true) when (@retina = true){
    @width: @x / 2;
    @height: @y / 2;
    width: @width;
    height: @height;
    background-size: @width @height;
}

.icon(@x, @y, @file, @retina: false, @type: png){
    .img(@file, @type);
    .icon-size(@x, @y, @retina);
}

.set-icon(@x, @y, @file, @retina: false, @type: png) {
    .img(@file, @type);
    .icon-size(@x, @y, @retina);
}

// image sprite maker
.set-sprite(@x, @y, @width, @height, @automate: false) when (@automate = false){
    background-position: 0-(@width * @x) 0-(@height * @y);
}

.set-sprite(@x, @y, @width, @height, @automate: false) when (@automate = true){
    background-position: 0-(@width * @x) 0-(@height * @y);
    width: @width;
    height: @height;
    background-repeat: no-repeat;
}

/* wrap width */
.wrap-width(@width: @wrap-width){
    width: @width;
}

/* hover opacity */
.hover-opacity(@opacity: 0.7, @duration: .2s){
    opacity: @opacity;
    transition: opacity @duration;
    &:hover {
        opacity: 1;
    }
}

// hover-scale
.hover-scale(@scale: 1.1, @duration: .2s){
    .scale(1, 1);
    transition: transform @duration;
    -webkit-transition: -webkit-transform @duration;
    &:hover {
        .scale(@scale, @scale);
    }
}

// list 에 파이프 이미지 적용, li 에 삽입함
.pipe-list(@image: 'common/pipe', @padding: 0){
    padding-left: @padding + 1;
    padding-right: @padding;
    .img('common/pipe_quicklaunch');
    background-position: left center;
    &:first-child {
        padding-left: 0;
        background: none;
    }
}

.semantic {
    position: absolute;
    z-index: -1;
    display: block;
    display: inline-block;
    margin: -1px;
    padding: 0;
    height: 1px;
    clip: rect(0 0 0 0);
    border: none;
    white-space: nowrap;
    overflow: hidden;
}

// media aspect ratio 를 설정함
// 자식 노드에 영향을 미침
// .item .media
.set-aspect(@width: 640, @height: 480, @bg-color: #eee){
    @ratio: (@height/@width) * 100;
    position: relative;
    height: 20px;
    padding-bottom: @ratio + 0%;
    background-color: @bg-color;
    > div,
    .media {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }
}
